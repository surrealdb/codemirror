# Simple Select

SELECT * FROM test

==>

SurrealQL(SelectStatement(Keyword,Any,Keyword,Ident))

# Define Function

DEFINE FUNCTION fn::greet($name: string) {
	RETURN "Hello, " + $name + "!";
};

-- Returns: "Hello, Tobie!"
RETURN fn::greet("Tobie");

==>

SurrealQL(
  DefineStatement(
    Keyword,Keyword,FunctionName,ParamList(VariableName,Colon,TypeName),
    Block(BraceOpen,
      ReturnStatement(Keyword,BinaryExpression(BinaryExpression(String,Operator,VariableName),Operator,String)),
      BraceClose)),
  Comment,
  ReturnStatement(Keyword,FunctionCall(FunctionName,ArgumentList(String))))

# Remove Function

REMOVE FUNCTION fn::update_author;

==>

SurrealQL(RemoveStatement(Keyword,Keyword,FunctionName))

# Live Select targets

LIVE SELECT * FROM person;
LIVE SELECT * FROM person:tobie;

==>

SurrealQL(
	LiveSelectStatement(Keyword,Keyword,Any,Keyword,Ident),
	LiveSelectStatement(Keyword,Keyword,Any,Keyword,RecordId(RecordTbIdent,Colon,RecordIdIdent)),
)

# Let Substatements

LET $bla = (SELECT * FROM 123);
LET $bla = SELECT * FROM 123;

==>

SurrealQL(
  LetStatement(Keyword,VariableName,SubQuery(SelectStatement(Keyword,Any,Keyword,Int))),
  LetStatement(Keyword,VariableName,SelectStatement(Keyword,Any,Keyword,Int)))

# Block Comments

1 /* this is
     a block
     comment */ + 2;

==>

SurrealQL(BinaryExpression(Int,BlockComment,Operator,Int))

# Version Clause

SELECT * FROM person VERSION d'2024-10-10T14:37:08.444Z'

==>

SurrealQL(SelectStatement(Keyword,Any,Keyword,Ident,VersionClause(Keyword,String)))


# Recurse part

person:tobie.{..}->knows->person;
person:tobie.{..}(->knows->person).name;
person:tobie.{..}.{ id, name, knows: ->knows->person.@ };
a:1.{1};
a:1.{1..};
a:1.{1..2};
a:1.{..2};
@.name;
@name;

==>

SurrealQL(
  Path(
    RecordId(RecordTbIdent,Colon,RecordIdIdent),
    Subscript(Recurse(BraceOpen,RecurseRange(RangeOp),BraceClose)),
    GraphPath(ArrowRight,Ident), GraphPath(ArrowRight,Ident)
  ),
  Path(
    RecordId(RecordTbIdent,Colon,RecordIdIdent),
    Subscript(
      Recurse(
        BraceOpen, RecurseRange(RangeOp), BraceClose,
        Path(GraphPath(ArrowRight,Ident), GraphPath(ArrowRight,Ident))
      )
    ),
    Subscript(Ident)
  ),
  Path(
    RecordId(RecordTbIdent,Colon,RecordIdIdent),
    Subscript(Recurse(BraceOpen,RecurseRange(RangeOp),BraceClose)),
    Subscript(Destructure(BraceOpen,Ident,Ident,Ident,Colon,GraphPath(ArrowRight,Ident),GraphPath(ArrowRight,Ident),Subscript(At),BraceClose))
  ),
  Path(
    RecordId(RecordTbIdent,Colon,Int),
    Subscript(Recurse(BraceOpen,RecurseRange(Int),BraceClose))
  ),
  Path(
    RecordId(RecordTbIdent,Colon,Int),
    Subscript(Recurse(BraceOpen,RecurseRange(Int,RangeOp),BraceClose))
  ),
  Path(
    RecordId(RecordTbIdent,Colon,Int),
    Subscript(Recurse(BraceOpen,RecurseRange(Int,RangeOp,Int),BraceClose))
  ),
  Path(
    RecordId(RecordTbIdent,Colon,Int),
    Subscript(Recurse(BraceOpen,RecurseRange(RangeOp,Int),BraceClose))
  ),
  Path(At,Subscript(Ident)),
  Path(At,Ident)
)
