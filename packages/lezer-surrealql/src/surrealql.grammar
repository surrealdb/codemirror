@top SurrealQL {
	expressions
}

@top PermissionInput {
	WhereClause | none | full
}

@top IndexInput {
	IndexClause
}

@top CombinedResults {
	CombinedResult { CommentResult expression CommentResultClose { "" } }+
}

@top Syntax {
	(
		(for !for (create | update | delete | select)) |
		anyKeyword |
		anyLiteral |
		SyntaxDescribe { "@" rawident }
		| "|" | "[" | "]"
	)*
}

@precedence {
	range @left
	method
	binary @left
	union @left
	filter
	for
}

expressions {
	(expression ";")* expression ";"?
}

expression {
	statement |
	value
}

SubQuery {
	"("
	expression
	")"
}

Block {
	"{" expressions? "}"
}

Closure {
	ParamList { "|" commaSep<VariableName ":" safeType>? "|" } ("->" type)? Block
}

subqueryStatement {
	IfElseStatement |
	LetStatement |
	DeleteStatement |
	CreateStatement |
	SelectStatement |
	RelateStatement |
	UpdateStatement |
	RemoveStatement |
	UpsertStatement |
	ReturnStatement |
	AlterStatement |
	DefineStatement |
	RebuildStatement |
	InsertStatement
}

statement[@isGroup=Statement] {
	BeginStatement |
	CancelStatement |
	CommitStatement |
	InfoForStatement |
	KillStatement |
	LiveSelectStatement |
	ShowStatement |
	SleepStatement |
	UseStatement |
	OptionStatement |
	BreakStatement |
	ContinueStatement |
	ForStatement |
	ThrowStatement |
	subqueryStatement
}

// Transaction statements

BeginStatement { begin transaction? }
CancelStatement { cancel transaction? }
CommitStatement { commit transaction? }

// Define statements

DefineStatement {
	define
	(
	( access defineAccessOptions ) |
	( namespace defineNamespaceOptions ) |
	( database defineDatabaseOptions ) |
	( user defineUserOptions ) |
	( token defineTokenOptions ) |
	( event defineEventOptions ) |
	( field defineFieldOptions ) |
	( index defineIndexOptions ) |
	( analyzer defineAnalyzerOptions ) |
	( functionKw defineFunctionOptions ) |
	( param defineParamOptions ) |
	( scope defineScopeOptions ) |
	( table defineTableOptions ) |
	( config defineConfigOptions )
	)
}

defineAccessOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	accessClauses1 {
		OnRootNsDbClause
		AccessTypeClause
	}
	accessClauses2 {
		AuthenticateClause?
		DurationClause?
		CommentClause?
	}
}

defineAnalyzerOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	(
		TokenizersClause |
		FiltersClause |
		FunctionClause |
		CommentClause
	)*
}

defineEventOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	OnTableClause
	(
		WhenClause {
			when
			value
		} |
		ThenClause {
			then
			commaSep<(SubQuery | Block)>
		} |
		CommentClause
	)*
}

defineDatabaseOptions {
	(IfNotExistsClause | overwrite)?
	Ident on Ident
	CommentClause?
}

defineFieldOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	OnTableClause
	(
		TypeClause |
		DefaultClause |
		ReadonlyClause |
		ValueClause |
		AssertClause |
		PermissionsForClause |
		CommentClause
	)*
}

defineFunctionOptions {
	(IfNotExistsClause | overwrite)?
	customFunctionName
	ParamList { "(" commaSep<VariableName ":" type>? ")" }
	("->" type)?
	Block
	(
		PermissionsBasicClause |
		CommentClause
	)*
}

functionKw[@name=Keyword] { function }

defineIndexOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	OnTableClause
	(
		FieldsColumnsClause |
		IndexClause |
		CommentClause |
		concurrently
	)*
}

defineNamespaceOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	CommentClause?
}

defineParamOptions {
	(IfNotExistsClause | overwrite)?
	VariableName
	valueKeyword
	value
}

defineScopeOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	(
		SessionClause |
		SigninClause |
		SignupClause |
		CommentClause
	)*
}

defineTableOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	(
		drop |
		(schemafull | schemaless) |
		TableTypeClause |
		TableViewClause |
		ChangefeedClause |
		PermissionsForClause |
		CommentClause
	)*
}

defineConfigOptions {
	(IfNotExistsClause | overwrite)?
	graphql
	(
		none |
		auto |
		tables ( none | auto | include commaSep<Ident> | exclude commaSep<Ident> ) |
		functions ( none | auto )
	)*
}

defineTokenOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	( on ( namespace | database | scope Ident ) )
	TokenTypeClause
	( valueKeyword String )
}

defineUserOptions {
	(IfNotExistsClause | overwrite)?
	Ident
	OnRootNsDbClause
	( ( password | passhash ) String )
	( roles commaSep<Ident> )
  DurationClause?
}

// Alter statement

AlterStatement {
	alter
	(
	( table alterTableOptions )
	)
}

alterTableOptions {
	IfNotExistsClause?
	Ident
	(
		drop |
		(schemafull | schemaless) |
		PermissionsForClause |
		CommentClause
	)*
}

// Remove statement

RemoveStatement {
	remove
	(
	( namespace IfExistsClause? Ident ) |
	( database IfExistsClause? Ident ) |
	( user IfExistsClause? Ident on ( root | namespace | database ) ) |
	( token IfExistsClause? Ident on ( namespace | database | scope ) ) |
	( event IfExistsClause? Ident on table? Ident ) |
	( field IfExistsClause? Ident on table? Ident ) |
	( index IfExistsClause? Ident on table? Ident ) |
	( analyzer IfExistsClause? Ident ) |
	( functionKw IfExistsClause? customFunctionName ) |
	( param IfExistsClause? VariableName ) |
	( scope IfExistsClause? Ident ) |
	( table IfExistsClause? Ident )
	)
}

// Data statements

CreateStatement {
	create only?
	createTargets { commaSep<Ident | VariableName | FunctionCall | RecordId> }
	createContent { ContentClause | SetClause | UnsetClause | () }
	ReturnClause?
	TimeoutClause?
	ParallelClause?
}

SelectStatement {
	(select)
	(
		valueKeyword Predicate |
		commaSep<inclusivePredicate> OmitClause?
	)
	(from)
	(only)?
	(
		statement |
		(
			commaSep<value>
			selectClauses1 {
				WithClause?
				WhereClause?
				SplitClause?
			}
			selectClauses2 {
				GroupClause?
				OrderClause?
				LimitStartComboClause?
			}
			selectClauses3 {
				FetchClause?
				TimeoutClause?
				ParallelClause?
				TempfilesClause?
				ExplainClause?
			}
		)
	)
}

DeleteStatement {
	delete only?
	(
		statement |
		(
			commaSep<value>
			WhereClause?
			ReturnClause?
			TimeoutClause?
			ParallelClause?
		)
	)
}

InsertStatement {
	insert
	ignore?
	relation?
	(into Ident)?
	(
		// TODO this should be value, but cannot easily union with VALUES syntax
		Object |
		VariableName |
		( "[" commaSep<Object> "]" ) |
		(
			"(" commaSep<Ident> ")"
			values
			commaSep<(
				"(" commaSep<value> ")"
			)>
		)
	)
	(
		on duplicate key update
		commaSep<FieldAssignment>
	)?
}

IfElseStatement {
	if
	(
		Legacy {
			value
			then
			( Block | SubQuery)
			(
				else if
				value
				then
				( Block | SubQuery)
			)*
			(
				else
				( Block | SubQuery)
			)?
			end
		} |
		Modern {
			value Block
			(
				else if
				value Block
			)*
			(
				else Block
			)?
		}
	)
}

relateSubject { Array | Ident | FunctionCall | VariableName | RecordId }
RelateStatement {
	relate only?
	relateSubject "->" relateSubject "->" relateSubject
	( ContentClause | SetClause )?
	ReturnClause?
	TimeoutClause?
	ParallelClause?
}

InfoForStatement {
	info for
	(
		root |
		ns | namespace |
		db | database |
		( sc Ident | scope Ident) |
		( tb Ident | table Ident)
	)
	structure?
}

UpdateStatement {
	update only?
	(
		statement |
		(
			commaSep<value>
			updateClause1 {
				ContentClause |
				ReplaceClause |
				MergeClause |
				PatchClause |
				SetClause |
				UnsetClause
			}?
			updateClause2 {
				WhereClause?
				ReturnClause?
				TimeoutClause?
				ParallelClause?
			}
		)
	)
}

UpsertStatement {
	upsert only?
	(
		statement |
		(
			commaSep<value>
			updateClause1 {
				ContentClause |
				ReplaceClause |
				MergeClause |
				PatchClause |
				SetClause |
				UnsetClause
			}?
			updateClause2 {
				WhereClause?
				ReturnClause?
				TimeoutClause?
				ParallelClause?
			}
		)
	)
}

// Control statements
BreakStatement { break }
ContinueStatement { continue }
ForStatement { for VariableName in ( Array | VariableName | SubQuery | Block ) Block }
ReturnStatement { return expression }
ThrowStatement { throw value }

// Live statements
KillStatement { kill String }
LiveSelectStatement {
	live select
	(
		diff |
		valueKeyword Predicate |
		commaSep<inclusivePredicate>
	)
	from commaSep<( Ident | RecordId )>
	WhereClause?
	FetchClause?
}

// Other statements
LetStatement {
	let VariableName (":" type)? "=" (value | subqueryStatement)
}

ShowStatement {
	show changes for table
	Ident
	( since String )?
	( limit Int )?
}

SleepStatement {
	sleep Duration
}

useNs { ( ns | namespace ) Ident }
useDb { ( db | database ) Ident }
UseStatement {
	use
	( useNs | useDb | ( useNs useDb ) )
}

OptionStatement {
option
Ident
( "=" ( true | false ) )?
}

RebuildStatement {
rebuild index
IfExistsClause?
Ident
OnTableClause
}

// Values

baseValue {
	String |
	prefixedString |
	number |
	true |
	false |
	null |
	none |
	Regex |
	VariableName |
	Ident[@dynamicPrecedence=-1] { rawident } |
	Array |
	RecordId |
	FunctionJs |
	FunctionCall |
	SubQuery |
	Block |
	Closure |
	Object |
	TypeCast |
	Duration |
	Point { "(" Decimal "," Decimal ")" }
}

Any { "?" }
AnyStar[@name=Any] { "*" }

value[@isGroup=Value] {
	baseValue |
	BinaryExpression |
	Path
}

// Binary expressions

BinaryExpression {
	value !binary Operator value
}

Path {
	baseValue pathElement+ |
	GraphPath pathElement*
}

pathElement {
	GraphPath |
	Subscript {
		"?"?
		"."
		(
			Ident |
			FunctionName { rawident !method } ArgumentList |
			AnyStar |
			Destructure
		)
	} |
	Filter { !filter "[" (WhereClause | WhereClause { "?" value } | expression) "]" }
}

GraphPath {
	("<-" | "->" | "<->")
	(Ident | Any | "(" commaSep<GraphPredicate> ")")
}

GraphPredicate {
	(value | Any) WhereClause? (as Ident)?
}

Destructure {
	"{" commaSep<((Ident ":")? Ident pathElement?)> "}"
}

// Objects

ObjectKey {
	KeyName { rawident } |
	String
}

ObjectProperty {
	ObjectKey ":" value
}

ObjectContent {
	commaSepTrailing<ObjectProperty>
}

Object {
	objectOpen ObjectContent? "}"
}

// Arrays

Array { "[" commaSep<value>? "]"}

// Record Ids

RecordTbIdent {
	rawident |
	tickIdent |
	bracketIdent
}

RecordIdIdent {
	numberident |
	tickIdent |
	bracketIdent
}

recordIdValue {
	RecordIdIdent |
	Int |
	Array |
	Object
}

RecordIdRange {
	( recordIdValue !range ">"? )?
	".."
	( !range "="? recordIdValue )?
}

RecordId {
	RecordTbIdent
	":"
	( recordIdValue | RecordIdRange )
}

// Durations

Duration {
	DurationPart+
}

// JS Functions

FunctionJs {
	FunctionName { function }
	ArgumentList
	JavaScriptBlock
}

@skip {} {
	JavaScriptBlock {
		"{" JavaScriptContent { javaScriptElement* } "}"
	}
	javaScriptElement {
		javaScriptContent | javaScriptBraceOpen javaScriptElement* javaScriptBraceClose
	}
}

// Function invocation

FunctionCall {
	( count ArgumentListCount ) |
	(
	   (FunctionName | customFunctionName | rand)
    	Version { "<" VersionNumber ">" }?
    	ArgumentList
	)
}

ArgumentList { "(" commaSep<value>? ")" }
ArgumentListCount[@name=ArgumentList] { "(" ( commaSep<value>? | statement ) ")" }

// Assignment

FieldAssignment {
	Ident
	assignmentOperator
	value
}

// Clauses

MergeClause {
	merge Object
}

PatchClause {
	patch Array
}

TableTypeClause {
	typeKeyword
	(
		any |
		normal |
		(
			relation
			( ( in | from ) piped<Ident> )?
			( ( out | to ) piped<Ident> )?
		)
	)
}

TableViewClause {
	as
	select
	commaSep<inclusivePredicate>
	from
	commaSep<value>
	WhereClause?
	GroupClause?
}

ChangefeedClause {
	changefeed
	Duration
}

SessionClause {
	session
	Duration
}

SignupClause {
	signup
	( SubQuery | Block )
}

SigninClause {
	signin
	( SubQuery | Block )
}

AuthenticateClause {
	authenticate
	( SubQuery | Block )
}

JwtClause {
	algorithm Ident key Ident | url String
}

OnTableClause {
	on table? Ident
}

OnRootNsDbClause {
	on ( root | namespace | database )
}

AccessTypeClause {
	typeKeyword (
		( jwt JwtClause ) |
		( record SignupClause? SigninClause? ( with jwt JwtClause? ( with issuer key Ident )? )? )
	)
}

FieldsColumnsClause {
	( fields | columns ) commaSep<Ident>
}

IndexClause {
	UniqueClause |
	SearchAnalyzerClause |
	MtreeClause |
	HnswClause
}

UniqueClause {
	unique
}

SearchAnalyzerClause {
	search analyzer
	Ident
    (Bm25Clause | DocIdsOrderClause | DocLenghtsOrderClause | PostingsOrderClause |
	 TermsOrderClause | DocIdsCacheClause | DocLenghtsCacheClause | PostingsCacheClause |
	 TermsCacheClause | highlights)*
}

Bm25Clause { bm25 ( "(" Float "," Float ")")? }
DocIdsCacheClause { doc_ids_cache Int }
DocIdsOrderClause { doc_ids_order Int }
DocLenghtsCacheClause { doc_lengths_cache Int }
DocLenghtsOrderClause { doc_lengths_order Int }
PostingsCacheClause { postings_cache Int }
PostingsOrderClause { postings_order Int }
TermsCacheClause { terms_cache Int }
TermsOrderClause { terms_order Int }

MtreeClause {
	mtree
	IndexDimensionClause
	(
	MtreeDistClause |
	IndexTypeClause |
	IndexCapacityClause |
	DocIdsOrderClause |
	DocIdsCacheClause |
	MtreeCacheClause
	)*
}

MtreeCacheClause { mtree_cache Int }
MtreeDistClause { dist ( Distance ) }

HnswClause {
hnsw
IndexDimensionClause
	(
	HnswDistClause |
	IndexTypeClause |
	IndexCapacityClause |
	IndexLmClause |
	IndexM0Clause |
	IndexMClause |
	IndexEfcClause |
	IndexExtendCandidatesClause |
	IndexKeepPrunedConnectionsClause
	)*
}

HnswDistClause { dist ( Distance | ( minkowski number )) }

IndexDimensionClause { dimension Int }
IndexCapacityClause { capacity Int }
IndexLmClause { lm Float }
IndexM0Clause { m0 Int }
IndexMClause { m Int }
IndexEfcClause { efc Int }
IndexExtendCandidatesClause { extend_candidates }
IndexKeepPrunedConnectionsClause { keep_pruned_connections }

ContentClause {
	content Object
}

ReplaceClause {
	replace Object
}

SetClause {
	set commaSep<FieldAssignment>
}

OmitClause {
    omit commaSep<inclusivePredicate>
}

UnsetClause {
unset commaSep<FieldAssignment>
}

IfNotExistsClause {
	if not exists
}

IfExistsClause {
	if exists
}

ReturnClause {
	return
	( before | after | diff | commaSep<inclusivePredicate> )
}

TimeoutClause {
	timeout
	Duration
}

ParallelClause {
	parallel
}

TempfilesClause {
	tempfiles
}

FetchClause {
	fetch
	commaSep<Ident>
}

StartClause {
	start
	at?
	(Int | VariableName)
}

LimitClause {
	limit
	by?
	(Int | VariableName)
}

LimitStartComboClause {
	StartClause LimitClause? |
	LimitClause StartClause?
}

GroupClause {
	group
	(
	    by? commaSep<Ident> |
	    all
	)
}

OrderClause {
	order
	by?
	commaSep<Ident>
	( asc | desc )?
}

SplitClause {
	split
	on?
	Ident
}

WhereClause {
	where
	value
}

WithClause {
	with
	(
		noindex |
		index commaSep<Ident>
	)
}

ExplainClause {
	explain
	full?
}

TokenizersClause { tokenizers commaSep<AnalyzerTokenizer> }

FiltersClause {
	filters
	commaSep<AnalyzerFilters>
}

FunctionClause {
	functionKw
	customFunctionName
}

TypeClause {
	flexible?
	typeKeyword
	type
}

ReadonlyClause {
	readonly
}

DefaultClause {
	default
	value
}

ValueClause {
	valueKeyword
	value
}

AssertClause {
	assert
	value
}

PermissionsForClause {
	permissions
	(
		none | full |
		(
			for
			commaSep<select | create | update | delete>
			( WhereClause | none | full )
		)+
	)
}

PermissionsBasicClause {
	permissions
	none | full | WhereClause
}

CommentClause {
	comment
	String
}

DurationValue {
	(for token Duration) | (for session Duration)
}

DurationClause {
	duration (for session)? commaSep<DurationValue>
}

TokenTypeClause {
	typeKeyword
	TokenType
}

// Support

AnalyzerFilters {
	Filter ("(" (Int "," Int | Ident) ")")?
}

Predicate {
	value |
	value as Ident
}

inclusivePredicate {
  AnyStar | Predicate
}

// Types

literalType {
	String |
	ArrayType { "[" commaSep<type> "]" } |
	ObjectType { objectOpen ObjectTypeContent? "}" }
	// TODO support number and duration types
}

singleType {
    TypeName { rawident } |
    ParameterizedType { singleType "<" (type | Int) ">" } |
    LiteralType { literalType }
}

type {
    singleType |
    UnionType { type (!union "|" type)+ }
}

safeType {
  singleType | "<" type ">"
}

ObjectTypeContent {
	commaSep<ObjectTypeProperty>
}

ObjectTypeProperty {
	ObjectKey ":" type
}

TypeCast {
	"<" type ">" baseValue
}

Ident {
	rawident |
	tickIdent
}

number { Int | Float | Decimal }

Operator {
    binaryOperator |
	"-" | "=" | ">" | "<" |
	binaryOperatorKeyword |
	is | ( is opNot ) |
	in | ( opNot opIn ) |

	( "@" Int "@" ) |
	(
		"<|"
		Int
		( "," ( Int | Distance | ( minkowski number ) ) )
		"|>"
	)
}

@external tokens objectToken from "./tokens" {
	objectOpen[@name=BraceOpen]
}

@tokens {
	// Characters
	"{"[@name=BraceOpen]
	"}"[@name=BraceClose]
	"[" "]"
	"<" ">"
	":"[@name=Colon]
	"->"[@name=ArrowRight]
	"<-"[@name=ArrowLeft]
	"<->"[@name=ArrowBoth]
	"|"[@name=Pipe]

	// Helpers
	whitespace { $[ \n\r\t] }

	// Comments
	Comment { CommentHash | CommentDash | CommentSlash }
	CommentHash { "#" ![\n]* }
	CommentDash { "--" ![\n]* }
	CommentSlash { "//" ![\n]* }
	CommentResult[@name=Comment,closedBy=CommentResultClose] { "-------- Query" ![\n]* }

	// Numbers
	Int { "-"? @digit+ }
	frac { '.' @digit+ }
	exp { $[eE] $[+\-]? @digit+ }
	Float { "-"? @digit+ (frac exp? | exp) "f"? }
	Decimal { "-"? @digit+ frac? exp? "dec" }
	VersionNumber { @digit+ ("." @digit+ ("." @digit+)?)? }

	String { "'" (!['\\] | "\\" _)* "'" | '"' (!["\\] | "\\" _)* '"' }
	prefixedString[@name=String] { $[ruds] String }

	// Language
	VariableName { "$" (rawident | tickIdent | bracketIdent) }
	tickIdent {
		"`" ![`]+ '`'
	}
	bracketIdent {
		"⟨" ![⟩]+ "⟩"
	}
	rawident { (@asciiLetter | "_") (@asciiLetter | @digit | "_")* }
	numberident {
		rawident |
		( @digit+ (@asciiLetter | "_") (@asciiLetter | @digit | "_")* )
	}

	functionNameSegment { (@asciiLetter | "_") (@asciiLetter | "_" | @digit)* }
	FunctionName {
		functionNameSegment ("::" functionNameSegment)+
	}
	customFunctionName[@name=FunctionName] {
		"fn" ("::" functionNameSegment)*
	}

	Regex { "/" (![/\\\n[] | "\\" ![\n] | "[" (![\n\\\]] | "\\" ![\n])* "]")+ ("/" $[dgimsuvy]*)? }

	durationUnit { "ns" | "us" | "µs" | "ms" | "s" | "m" | "h" | "d" | "w" | "y"}
	DurationPart { @digit+ " "* durationUnit }

	@precedence { CommentResult Comment Int "-" }
	@precedence { Comment binaryOperator }
	@precedence { prefixedString rawident }
	@precedence { customFunctionName FunctionName rawident }
	@precedence { Float Decimal Int rawident }
	@precedence { DurationPart rawident }
	@precedence { DurationPart Int }
	@precedence { numberident Int rawident }

	javaScriptContent { "\n" | ![{}\n'"]+ "\n"? | String }
	javaScriptBraceOpen { "{" }
	javaScriptBraceClose { "}" }

	binaryOperator {
		"&&" | "||" | "??" | "?:" | "!=" | "==" | "?=" | "*=" | "~" | "!~" | "*~" |
		"<=" | ">=" | "+" | "+=" | "-=" | "*" | "×" | "/"  | "÷" | "**" |
		$[∋∌⊇⊃⊅∈∉⊆⊂⊄] | "@@"
    }

	assignmentOperator[@name=Operator] {
		"="  |
		"+=" |
		"-="
	}
}

commaSep<content> {
	content ("," content)*
}

commaSepTrailing<content> {
	content ("," content)* ","?
}

piped<content> {
	content ("|" content)*
}

@skip { whitespace | Comment }
@detectDelim

@external propSource surqlHighlighting from "./highlight"

@external extend { rawident } tokens from "./tokens" {
	access					[@name=Keyword],
	algorithm				[@name=Keyword],
	all						[@name=Keyword],
	alter					[@name=Keyword],
	analyzer				[@name=Keyword],
	any						[@name=Keyword],
	as						[@name=Keyword],
	asc						[@name=Keyword],
	assert					[@name=Keyword],
	at						[@name=Keyword],
	authenticate			[@name=Keyword],
	auto					[@name=Keyword],
	begin					[@name=Keyword],
	bm25					[@name=Keyword],
	break					[@name=Keyword],
	by						[@name=Keyword],
	cancel					[@name=Keyword],
	capacity				[@name=Keyword],
	changefeed				[@name=Keyword],
	changes					[@name=Keyword],
	columns					[@name=Keyword],
	comment					[@name=Keyword],
	commit					[@name=Keyword],
	concurrently			[@name=Keyword],
	config					[@name=Keyword],
	content					[@name=Keyword],
	continue				[@name=Keyword],
	create					[@name=Keyword],
	database				[@name=Keyword],
	db						[@name=Keyword],
	default					[@name=Keyword],
	define					[@name=Keyword],
	delete					[@name=Keyword],
	desc					[@name=Keyword],
	dimension				[@name=Keyword],
	dist					[@name=Keyword],
	doc_ids_cache			[@name=Keyword],
	doc_ids_order			[@name=Keyword],
	doc_lengths_cache		[@name=Keyword],
	doc_lengths_order		[@name=Keyword],
	drop					[@name=Keyword],
	duplicate				[@name=Keyword],
	duration				[@name=Keyword],
	efc						[@name=Keyword],
	else					[@name=Keyword],
	end						[@name=Keyword],
	event					[@name=Keyword],
	exclude					[@name=Keyword],
	exists					[@name=Keyword],
	explain					[@name=Keyword],
	extend_candidates		[@name=Keyword],
	fetch					[@name=Keyword],
	field					[@name=Keyword],
	fields					[@name=Keyword],
	filters					[@name=Keyword],
	flexible				[@name=Keyword],
	for						[@name=Keyword],
	from					[@name=Keyword],
	functions				[@name=Keyword],
	graphql					[@name=Keyword],
	group					[@name=Keyword],
	highlights				[@name=Keyword],
	hnsw					[@name=Keyword],
	if						[@name=Keyword],
	ignore					[@name=Keyword],
	in						[@name=Keyword],
	include					[@name=Keyword],
	index					[@name=Keyword],
	info					[@name=Keyword],
	insert					[@name=Keyword],
	into					[@name=Keyword],
	issuer					[@name=Keyword],
	jwt						[@name=Keyword],
	keep_pruned_connections	[@name=Keyword],
	key						[@name=Keyword],
	kill					[@name=Keyword],
	let						[@name=Keyword],
	limit					[@name=Keyword],
	live					[@name=Keyword],
	lm						[@name=Keyword],
	m						[@name=Keyword],
	m0						[@name=Keyword],
	merge					[@name=Keyword],
	mtree					[@name=Keyword],
	mtree_cache				[@name=Keyword],
	namespace				[@name=Keyword],
	noindex					[@name=Keyword],
	normal					[@name=Keyword],
	not						[@name=Keyword],
	ns						[@name=Keyword],
	omit					[@name=Keyword],
	on						[@name=Keyword],
	only					[@name=Keyword],
	option					[@name=Keyword],
	order					[@name=Keyword],
	out						[@name=Keyword],
	overwrite				[@name=Keyword],
	parallel				[@name=Keyword],
	param					[@name=Keyword],
	passhash				[@name=Keyword],
	password				[@name=Keyword],
	patch					[@name=Keyword],
	permissions				[@name=Keyword],
	postings_cache			[@name=Keyword],
	postings_order			[@name=Keyword],
	readonly				[@name=Keyword],
	rebuild					[@name=Keyword],
	record					[@name=Keyword],
	relate					[@name=Keyword],
	relation				[@name=Keyword],
	remove					[@name=Keyword],
	replace					[@name=Keyword],
	return					[@name=Keyword],
	roles					[@name=Keyword],
	root					[@name=Keyword],
	sc						[@name=Keyword],
	schemafull				[@name=Keyword],
	schemaless				[@name=Keyword],
	scope					[@name=Keyword],
	search					[@name=Keyword],
	select					[@name=Keyword],
	session					[@name=Keyword],
	set						[@name=Keyword],
	show					[@name=Keyword],
	signin					[@name=Keyword],
	signup					[@name=Keyword],
	since					[@name=Keyword],
	sleep					[@name=Keyword],
	split					[@name=Keyword],
	start					[@name=Keyword],
	structure				[@name=Keyword],
	table					[@name=Keyword],
	tables					[@name=Keyword],
	tb						[@name=Keyword],
	tempfiles				[@name=Keyword],
	terms_cache				[@name=Keyword],
	terms_order				[@name=Keyword],
	then					[@name=Keyword],
	throw					[@name=Keyword],
	timeout					[@name=Keyword],
	to						[@name=Keyword],
	token					[@name=Keyword],
	tokenizers				[@name=Keyword],
	transaction				[@name=Keyword],
	typeKeyword				[@name=Keyword],
	unique					[@name=Keyword],
	unset					[@name=Keyword],
	update					[@name=Keyword],
	upsert					[@name=Keyword],
	url						[@name=Keyword],
	use						[@name=Keyword],
	user					[@name=Keyword],
	valueKeyword			[@name=Keyword],
	values					[@name=Keyword],
	when					[@name=Keyword],
	where					[@name=Keyword],
	with					[@name=Keyword],

	// Literals
	after					[@name=Literal],
	before					[@name=Literal],
	diff					[@name=Literal],
	false					[@name=Bool],
	full					[@name=Literal],
	none					[@name=None],
	null					[@name=None],
	true					[@name=Bool],

	IndexTypeClause,
	TokenType,

	// Operators
	binaryOperatorKeyword,
	is,
	opIn,
	opNot,

	Distance,
	minkowski				[@name=Distance],
	Filter,

	AnalyzerTokenizer,

	function,
	rand					[@name=FunctionName],
	count					[@name=FunctionName]
}

anyKeyword {
	access |
	algorithm |
	alter |
	analyzer |
	any |
	as |
	asc |
	assert |
	at |
	authenticate |
	auto |
	begin |
	bm25 |
	break |
	by |
	cancel |
	capacity |
	changefeed |
	changes |
	columns |
	comment |
	commit |
	concurrently |
	config |
	content |
	continue |
	create |
	database |
	db |
	default |
	define |
	delete |
	desc |
	dimension |
	dist |
	doc_ids_cache |
	doc_ids_order |
	doc_lengths_cache |
	doc_lengths_order |
	drop |
	duplicate |
	duration |
	efc |
	else |
	end |
	event |
	exclude |
	exists |
	explain |
	extend_candidates |
	fetch |
	field |
	fields |
	filters |
	flexible |
	for |
	from |
	functions |
	graphql |
	group |
	highlights |
	hnsw |
	if |
	ignore |
	in |
	include |
	index |
	info |
	insert |
	into |
	issuer |
	jwt |
	keep_pruned_connections |
	key |
	kill |
	let |
	limit |
	live |
	lm |
	m |
	m0 |
	merge |
	mtree |
	mtree_cache |
	namespace |
	noindex |
	normal |
	not |
	ns |
	on |
	only |
	option |
	order |
	out |
	overwrite |
	parallel |
	param |
	passhash |
	password |
	patch |
	permissions |
	postings_cache |
	postings_order |
	readonly |
	rebuild |
	record |
	relate |
	relation |
	remove |
	return |
	roles |
	root |
	sc |
	schemafull |
	schemaless |
	scope |
	search |
	select |
	session |
	set |
	show |
	signin |
	signup |
	since |
	sleep |
	split |
	start |
	structure |
	table |
	tables |
	tb |
	tempfiles |
	terms_cache |
	terms_order |
	then |
	throw |
	timeout |
	to |
	token |
	tokenizers |
	transaction |
	typeKeyword |
	unique |
	unset |
	update |
	upsert |
	url |
	use |
	user |
	valueKeyword |
	values |
	when |
	where |
	with
}

anyLiteral {
	after |
	before |
	diff |
	false |
	full |
	none |
	null |
	true |

	IndexTypeClause
}
